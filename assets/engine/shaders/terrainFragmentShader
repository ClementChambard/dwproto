#version 400 core

in vec2 fragTexCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void)
{
    
    vec4 blendMapColor = texture(blendMap, fragTexCoords);
    float backTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = fragTexCoords * 40.0;
    vec4 backTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
    vec4 color = backTextureColor + rTextureColor + gTextureColor + bTextureColor;

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitToCamera = normalize(toCameraVector);
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    for (int i = 0; i < 4; i++)
    {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + attenuation[i].y * distance + attenuation[i].z * distance;
        vec3 unitToLight = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitToLight);
        float brightness = max(nDot1, 0.0);
        vec3 lightDirection = -unitToLight;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalSpecular += (dampedFactor * reflectivity * lightColor[i]) / attFactor;
        totalDiffuse += (brightness * lightColor[i]) / attFactor;
    }

    out_color = vec4(totalDiffuse, 1.0) * color + vec4(totalSpecular, color.a);
    out_color = mix(vec4(skyColor,1.0),out_color, visibility);
}
