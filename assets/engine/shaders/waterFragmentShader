#version 400 core

in vec4 clipSpace;
in vec2 fragTexCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;
out vec4 fragmentColor;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform vec3 lightColor;

uniform vec2 moveFactor;

const float waveStrength = 0.02;
const float reflectionPower = 3.0;
const float shineDamper = 20.0;
const float reflectivity = 0.5;
const vec4 waterColor = vec4(0.0, 0.3, 0.5, 1.0);

void main(void) 
{

    vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0+0.5;
    vec2 refractTexCoords = vec2(ndc.x, ndc.y);
    vec2 reflectTexCoords = vec2(ndc.x, -ndc.y+1.0);

    float near = 0.01;
    float far = 10000.0;
    float depth = texture(depthMap, refractTexCoords).r;
    float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = floorDistance - waterDistance;

    vec2 distortedTexCoords = (texture(dudvMap, fragTexCoords + vec2(moveFactor.x, 0.0))).rg * 0.1;
    distortedTexCoords = fragTexCoords + distortedTexCoords + vec2(0.0, moveFactor.y);
    vec2 distortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/8.0, 0.0, 1.0);

    refractTexCoords += distortion;
    refractTexCoords = clamp(refractTexCoords, 0.001, .999);
    reflectTexCoords += distortion;
    reflectTexCoords = clamp(reflectTexCoords, 0.001, .999);
    //reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
    //reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, 0.001);

    vec4 reflectColor = texture(reflectionTexture, reflectTexCoords);
    vec4 refractColor = texture(refractionTexture, refractTexCoords) ;//+ waterColor * waterDepth / 50.0;

    vec4 normalMapColor = texture(normalMap, distortedTexCoords);
    vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 3.0, normalMapColor.g * 2.0 - 1.0);
    normal = normalize(normal);

    vec3 viewVector = normalize(toCameraVector);
    float refractiveFactor = dot(viewVector, normal);
    refractiveFactor = pow(refractiveFactor, reflectionPower);

    vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
    float specular = max(dot(reflectedLight, viewVector), 0.0);
    specular = pow(specular, shineDamper);
    vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth/5.0, 0.0, 1.0);

    fragmentColor = mix(reflectColor, refractColor, refractiveFactor);
    fragmentColor = mix(fragmentColor, waterColor, 0.2) + vec4(specularHighlights, 0.0);
    fragmentColor.a = clamp(waterDepth/5.0, 0.0, 1.0);
}
